/// <reference path="../../base.d.ts" />
/// <reference path="../geom/Point.ts" />
/// <reference path="../display/InteractiveObject.ts" />
/// <reference path="../display/DisplayObject.ts" />

namespace flash.events
{
	export import DisplayObject = flash.display.DisplayObject;
	export import InteractiveObject = flash.display.InteractiveObject;
	export import Point = flash.geom.Point;
	
	
	/**
	 * A MouseEvent object is dispatched into the event flow whenever mouse events occur. 
	 * A mouse event is usually generated by a user input device, such as a mouse or a trackball, that uses a pointer.
	 * When nested nodes are involved, mouse events target the deepest possible nested node that is visible in the display list.
	 *  This node is called the target node. To have a target node's ancestor receive notification of a mouse event, 
	 * use EventDispatcher.addEventListener() on the ancestor node with the type parameter set to the specific mouse event you want to detect. 
	 * @author pkulikov
	 * 
	 */	
	export  class MouseEvent extends Event
	{
		/**
		 * Defines the value of the type property of a click event object. 
		 */		
		public static CLICK:string = "click";
		
		/**
		 * Defines the value of the type property of a doubleClick event object. 
		 */		
		public static DOUBLE_CLICK:string = "doubleClick";
		
		/**
		 * Defines the value of the type property of a mouseDown event object. 
		 */		
		public static MOUSE_DOWN:string = "mouseDown";
		
		/**
		 * Defines the value of the type property of a mouseMove event object. 
		 */		
		public static MOUSE_MOVE:string = "mouseMove";
		
		/**
		 * Defines the value of the type property of a mouseOut event object. 
		 */		
		public static MOUSE_OUT:string = "mouseOut";
		
		/**
		 * Defines the value of the type property of a mouseOver event object. 
		 */		
		public static MOUSE_OVER:string = "mouseOver";
		
		/**
		 * Defines the value of the type property of a mouseUp event object. 
		 */		
		public static MOUSE_UP:string = "mouseUp";
		
		/**
		 * Defines the value of the type property of a releaseOutside event object. 
		 */		
		public static RELEASE_OUTSIDE:string = "releaseOutside";
		
		/**
		 * Defines the value of the type property of a mouseWheel event object. 
		 */		
		public static MOUSE_WHEEL:string = "mouseWheel";
		
		/**
		 * Defines the value of the type property of a rollOut event object. 
		 */		
		public static ROLL_OUT:string = "rollOut";
		
		/**
		 * Defines the value of the type property of a rollOver event object. 
		 */		
		public static ROLL_OVER:string = "rollOver";
		
		/**
		 * Defines the value of the type property of a middleClick event object. 
		 */		
		public static MIDDLE_CLICK:string = "middleClick";
		
		/**
		 * Defines the value of the type property of a middleMouseDown event object.
		 */		
		public static MIDDLE_MOUSE_DOWN:string = "middleMouseDown";
		
		/**
		 * Defines the value of the type property of a middleMouseUp event object. 
		 */		
		public static MIDDLE_MOUSE_UP:string = "middleMouseUp";
		
		/**
		 * Defines the value of the type property of a rightClick event object. 
		 */		
		public static RIGHT_CLICK:string = "rightClick";
		
		/**
		 * Defines the value of the type property of a rightMouseDown event object. 
		 */		
		public static RIGHT_MOUSE_DOWN:string = "rightMouseDown";
		
		/**
		 * Defines the value of the type property of a rightMouseUp event object. 
		 */		
		public static RIGHT_MOUSE_UP:string = "rightMouseUp";
		/**
		 * The MouseEvent.CONTEXT_MENU constant defines the value of the type property of a contextMenu event object. 
		 */		
		public static CONTEXT_MENU:string = "contextMenu";
		
		private _relatedObject:InteractiveObject;
		private _ctrlKey:boolean;
		private _altKey:boolean;
		private _shiftKey:boolean;
		private _buttonDown:boolean;
		private _delta:number;
		private _isRelatedObjectInaccessible:boolean;
		private _localX:number;
		private _localY:number;
		private _commandKey:boolean;
		private _controlKey:boolean;
		private _clickCount:number;
		private _movementX:number;
		private _movementY:number;
		
		/**
		 * Creates an Event object that contains information about mouse events. 
		 * @param type
		 * @param bubbles
		 * @param cancelable
		 * @param localX
		 * @param localY
		 * @param relatedObject
		 * @param ctrlKey
		 * @param altKey
		 * @param shiftKey
		 * @param buttonDown
		 * @param delta
		 * @param commandKey
		 * @param controlKey
		 * @param clickCount
		 * 
		 */		
		constructor(type:string, bubbles:boolean = true, cancelable:boolean = false, localX:number = NaN, localY:number = NaN, relatedObject:InteractiveObject = null, ctrlKey:boolean = false, altKey:boolean = false, shiftKey:boolean = false, buttonDown:boolean = false, delta:number = 0, commandKey:boolean = false, controlKey:boolean = false, clickCount:number = 0)
		{
			/**/ type = as(type, 'String'); bubbles = Boolean(bubbles); cancelable = Boolean(cancelable); localX = (+(localX)); localY = (+(localY)); relatedObject = strict(relatedObject, InteractiveObject); ctrlKey = Boolean(ctrlKey); altKey = Boolean(altKey); shiftKey = Boolean(shiftKey); buttonDown = Boolean(buttonDown); delta = ((delta) >> 0); commandKey = Boolean(commandKey); controlKey = Boolean(controlKey); clickCount = ((clickCount) >> 0);
			/**/ this._relatedObject === void 0 && (this._relatedObject = null);
			/**/ this._ctrlKey === void 0 && (this._ctrlKey = false);
			/**/ this._altKey === void 0 && (this._altKey = false);
			/**/ this._shiftKey === void 0 && (this._shiftKey = false);
			/**/ this._buttonDown === void 0 && (this._buttonDown = false);
			/**/ this._delta === void 0 && (this._delta = 0);
			/**/ this._isRelatedObjectInaccessible === void 0 && (this._isRelatedObjectInaccessible = false);
			/**/ this._localX === void 0 && (this._localX = NaN);
			/**/ this._localY === void 0 && (this._localY = NaN);
			/**/ this._commandKey === void 0 && (this._commandKey = false);
			/**/ this._controlKey === void 0 && (this._controlKey = false);
			/**/ this._clickCount === void 0 && (this._clickCount = 0);
			/**/ this._movementX === void 0 && (this._movementX = NaN);
			/**/ this._movementY === void 0 && (this._movementY = NaN);
			super(type, bubbles, cancelable);
			this._localX = localX;
			this._localY = localY;
			this._relatedObject = relatedObject;
			this._ctrlKey = ctrlKey;
			this._altKey = altKey;
			this._shiftKey = shiftKey;
			this._buttonDown = buttonDown;
			this._delta = delta;
			this._commandKey = commandKey;
			this._controlKey = controlKey;
			this._clickCount = clickCount;
		}
		
		/**
		 * Creates a copy of the MouseEvent object and sets the value of each property to match that of the original. 
		 * @return 
		 * 
		 */		
		/*override*/ public clone():Event
		{
			return new MouseEvent(this.type, this.bubbles, this.cancelable, this.localX, this.localY, this._relatedObject, this._ctrlKey, this._altKey, this._shiftKey, this._buttonDown, this._delta, this._commandKey, this._controlKey, this._clickCount);
		}
		
		/**
		 * Returns a string that contains all the properties of the MouseEvent object. 
		 * @return 
		 * 
		 */		
		/*override*/ public toString():string
		{
			return this.formatToString("MouseEvent", "type", "bubbles", "cancelable", "eventPhase", "localX", "localY", "stageX", "stageY", "relatedObject", "ctrlKey", "altKey", "shiftKey", "buttonDown", "delta", "commandKey", "controlKey", "clickCount");
		}
		
		/**
		 * When mouse locking is disabled, the horizontal coordinate at which the event occurred relative to the containing sprite. 
		 * @return 
		 * 
		 */		
		public get localX():number { return this._localX; }
		public set localX(value:number) { /**/ value = (+(value)); this._localX = value; }
		
		/**
		 * When mouse locking is disabled, the vertical coordinate at which the event occurred relative to the containing sprite. 
		 * @return 
		 * 
		 */		
		public get localY():number { return this._localY }
		public set localY(value:number) { /**/ value = (+(value)); this._localY = value; }
		
		/**
		 * A reference to a display list object that is related to the event. 
		 * @return 
		 * 
		 */		
		public get relatedObject():InteractiveObject { return this._relatedObject; }
		public set relatedObject(value:InteractiveObject) { /**/ value = strict(value, InteractiveObject); this._relatedObject = value; }
		
		/**
		 * Indicates whether the Control key is activated on Mac and whether the Ctrl key is activated on Windows or Linux.
		 * @return 
		 * 
		 */		
		public get controlKey():boolean { return this._controlKey; }
		public set controlKey(value:boolean) { /**/ value = Boolean(value); this._controlKey = value; }
		
		/**
		 * On Windows or Linux, indicates whether the Ctrl key is active (true) or inactive (false). 
		 * @return 
		 * 
		 */		
		public get ctrlKey():boolean { return this._ctrlKey; }
		public set ctrlKey(value:boolean) { /**/ value = Boolean(value); this._ctrlKey = value; }
		
		/**
		 * Indicates whether the Alt key is active (true) or inactive (false). 
		 * @return 
		 * 
		 */		
		public get altKey():boolean { return this._altKey; }
		public set altKey(value:boolean) { /**/ value = Boolean(value); this._altKey = value; }
		
		/**
		 * Indicates whether the Shift key is active (true) or inactive (false). 
		 * @return 
		 * 
		 */		
		public get shiftKey():boolean { return this._shiftKey; }
		public set shiftKey(value:boolean) { /**/ value = Boolean(value); this._shiftKey = value; }
		
		/**
		 * Indicates whether the primary mouse button is pressed (true) or not (false). 
		 * @return 
		 * 
		 */		
		public get buttonDown():boolean { return this._buttonDown; }
		public set buttonDown(value:boolean) { /**/ value = Boolean(value); this._buttonDown = value; }
		
		/**
		 * Indicates whether or not the mouse down event is part of a multi-click sequence. 
		 * @return 
		 * 
		 */		
		public get clickCount ():number { return this._clickCount; }
		
		/**
		 * Indicates whether the command key is activated (Mac only.) 
		 * The value of property commandKey will have the same value as property ctrlKey on the Mac. 
		 * @return 
		 * 
		 */		
		public get commandKey ():boolean { return this._commandKey; }
		public set commandKey (value:boolean) { /**/ value = Boolean(value); this._commandKey = value; }
		
		/**
		 * Indicates how many lines should be scrolled for each unit the user rotates the mouse wheel. 
		 * @return 
		 * 
		 */		
		public get delta():number { return this._delta; }
		public set delta(value:number) { /**/ value = ((value) >> 0); this._delta = value; }
		
		/**
		 * The horizontal coordinate at which the event occurred in global Stage coordinates. 
		 * @return 
		 * 
		 */		
		public get stageX():number
		{
			if (isNaN(this.localX) || isNaN(this.localY)) {
				
				return Number.NaN;
				
			}
			
			return this.getStageX();
		}
		
		/**
		 * The vertical coordinate at which the event occurred in global Stage coordinates. 
		 * @return 
		 * 
		 */		
		public get stageY():number
		{
			if (isNaN(this.localX) || isNaN(this.localY)) {
				
				return Number.NaN;
				
			}
			
			return this.getStageY();
		}
		
		private getStageX():number
		{
			if (!(is(this.target , DisplayObject))) {
				
				return 0;
				
			}
			
			var p = Point.__pool.get();
			
			p.__setTo(this.localX, this.localY);
			var v = this.target.__localToGlobal(p, p).x;
			
			Point.__pool.release(p);
			return v;
		}
		
		private getStageY():number
		{
			if (!(is(this.target , DisplayObject))) {
				
				return 0;
				
			}
			
			var p = Point.__pool.get();
			
			p.__setTo(this.localX, this.localY);
			var v = this.target.__localToGlobal(p, p).y;
			
			Point.__pool.release(p);
			return v;
		}
		
		/**
		 * If true, the relatedObject property is set to null for reasons related to security sandboxes. 
		 * @return 
		 * 
		 */		
		public get isRelatedObjectInaccessible():boolean { return this._isRelatedObjectInaccessible; }
		public set isRelatedObjectInaccessible(value:boolean) { /**/ value = Boolean(value); this._isRelatedObjectInaccessible = value; }
		
		/**
		 * When mouse locking is enabled, the change in mouse position in the X direction since the last mouse event. 
		 * @return 
		 * 
		 */		
		public get movementX():number { return this._movementX; }
		public set movementX(value:number) { /**/ value = (+(value)); this._movementX = value; }
		
		/**
		 * When mouse locking is enabled, the change in mouse position in the Y direction since the last mouse event. 
		 * @return 
		 * 
		 */		
		public get movementY():number { return this._movementY; }
		public set movementY(value:number) { /**/ value = (+(value)); this._movementY = value; }
		
		/**
		 * Instructs Flash Player or Adobe AIR to render after processing of this event completes, if the display list has been modified. 
		 * 
		 */		
		public updateAfterEvent():void
		{
			
		}
	}

}